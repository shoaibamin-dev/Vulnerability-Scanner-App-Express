<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Reports</title>

  <style>
    body {
      margin: 0px;
      padding: 50px;
      font-family: "Open Sans", arial;
      background: #0066C0;
      color: #fff;
      font-weight: 300;
    }

    @import "https://fonts.googleapis.com/css?family=Montserrat:300,400,700";

    .rwd-table {
      margin: 1em 0;
      min-width: 300px;
    }

    .rwd-table tr {
      border-top: 1px solid #ddd;
      border-bottom: 1px solid #ddd;
    }

    .rwd-table th {
      display: none;
    }

    .rwd-table td {
      display: block;
    }

    .rwd-table td:first-child {
      padding-top: .5em;
    }

    .rwd-table td:last-child {
      padding-bottom: .5em;
    }

    .rwd-table td:before {
      content: attr(data-th) ": ";
      font-weight: bold;
      width: 6.5em;
      display: inline-block;
    }

    @media (min-width: 480px) {
      .rwd-table td:before {
        display: none;
      }
    }

    .rwd-table th,
    .rwd-table td {
      text-align: left;
    }

    @media (min-width: 480px) {

      .rwd-table th,
      .rwd-table td {
        display: table-cell;
        padding: .25em .5em;
      }

      .rwd-table th:first-child,
      .rwd-table td:first-child {
        padding-left: 0;
      }

      .rwd-table th:last-child,
      .rwd-table td:last-child {
        padding-right: 0;
      }
    }



    h1 {
      font-weight: normal;
      letter-spacing: -1px;
      color: #ffffff;
    }

    .rwd-table {
      background: #34495E;
      color: #fff;
      border-radius: .4em;
      overflow: hidden;
    }

    .rwd-table tr {
      border-color: #46637f;
    }

    .rwd-table th,
    .rwd-table td {
      margin: .5em 1em;
    }

    @media (min-width: 480px) {

      .rwd-table th,
      .rwd-table td {
        padding: 1em !important;
      }
    }

    .rwd-table th,
    .rwd-table td:before {
      color: #dd5;
    }

    table tr td a {
      color: rgb(226, 225, 225);
    }
  </style>

</head>

<body>
  <h1>Reports</h1>


  <table class="rwd-table">
    <tr>
      <th>Code</th>
      <th>Description</th>
      <th>SQL Attacks</th>
      <th>XSS Attacks</th>
      <th>% of Malicious code</th>
      <th>Severity</th>
      <th>Recommendation</th>
    </tr>
    <% reports.forEach(report => { %>
    <tr>
      <td><a href="" onclick="showCode('<%= report.code %>')">view code</a></td>
      <td><a href="" onclick="showDescription()">view description</a></td>
      </td>
      <td><%= report.sqlLines %></td>
      <td><%= report.xssLines %></td>
      <td><%= report.pct %>%</td>
      <td>
        <% if (Number(report.pct) < 25) { %>
          None
        <% } else if (Number(report.pct) < 50) { %>
          Low
        <% } else if (Number(report.pct) < 75) { %>
          High
        <% } else if (Number(report.pct) <= 100) { %>
          Extremely High
        <% } %>
      </td>
      <td><a href="" onclick="viewRecommendation('<%= report.pct %>')">view recommendation</a></td>
      </td>
    </tr>
    <% }) %>
  </table>

  <form action="/scanner" method="get">
    <button type="submit" style="
    position: absolute;
    bottom: 10px;
    right: 10px;
    width: 100px;
    height: 28px;
    ">Dashboard</button>
  </form>

  <form action="/logout" method="get">
  <button style="
	position: absolute;
	top: 10px;
	right: 10px;
	width: 100px;
	height: 28px;
">Log out</button>
</form>


  <script>
    const showDescription = () => {
      alert(`
        SQL injection (SQLi) is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior.\n
        Cross-Site Scripting (XSS) attacks are a type of injection, in which malicious scripts are injected into otherwise benign and trusted websites. XSS attacks occur when an attacker uses a web application to send malicious code, generally in the form of a browser side script, to a different end user. Flaws that allow these attacks to succeed are quite widespread and occur anywhere a web application uses input from a user within the output it generates without validating or encoding it.\n
        `);
    }

    const showCode = (code) => {
      alert(code.split(',').join('\n'))
    }

    const viewRecommendation = (pct, messages) => {
      alert(getMessage(pct));
    }

    const getMessage = (pct) => {
      if (pct < 25) return '<%= messages[0] %>'
      if (pct < 50) return '<%= messages[1] %>'
      if (pct < 75) return '<%= messages[2] %>'
      if (pct <= 100) return '<%= messages[3] %>'
    }
  </script>
</body>

</html>