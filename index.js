const express = require('express')
const { createUserWithEmailAndPassword, signInWithEmailAndPassword } = require("firebase/auth");
const { ref, set, child, get } = require("firebase/database");

const { auth, database } = require('./config')
const app = express()
const port = 3000

app.use(express.json());
app.use(express.urlencoded());
app.use(express.static('images'))
app.set("view engine", "ejs");


let currentUser = {}
let errorLines = []
let numLines = 0
let sqlLines = 0
let xssLines = 0
const messages = [
  ['Congratulations, you have no redemiation because there is no severity in your code. But here is a few key takeaways for future work.', '-   Establish a standardized process.', '-   Make plans to quickly fix defects.', '-   Prioritize test code.', '-   Mature the product.'],
  ['Good news, you have low severity in your code. Here is a few key takeaways to make the code better.', '-   Install and maintain anti malicious code to prevent buggy code.', '-   Use caution with links and attachments.', '-   Block pop-up advertisements.', '-   Mature the product.'],
  ['Sad news, you have a high severity in your code. Here is a few key takeaways to make the code better.', '-   Use an account with limited permissions.', '-   Disable external media AutoRun and AutoPlay features.', '-   Change your passwords.', '-   Keep software updated.'],
  ['Horrific news, you have an extremely high severity in your code. Almost all of your code is contains malicious activities. Please follow these suggestions.', '-   Back up data.', '-   Install or enable a firewall.', '-   Use anti-spyware tools.', '-   Monitor accounts.', '-   Avoid using public Wi-Fi.'],
]

const checkLogout = (req, res, next) => {
  if(Object.values(currentUser).length == 0) {
    return res.render('index')
  }

  next();
}

async function getResults({ code }) {

  const lines = code.split('\r\n')
  numLines = lines.length
  sqlLines = 0
  // SQL Regex to Detect SQL Attacks
  const sqlregex = new RegExp(/(\s*([\0\b\'\"\n\r\t\%\_\\]*\s*(((select\s*.+\s*from\s*.+)|(insert\s*.+\s*into\s*.+)|(update\s*.+\s*set\s*.+)|(delete\s*.+\s*from\s*.+)|(drop\s*.+)|(truncate\s*.+)|(alter\s*.+)|(exec\s*.+)|(\s*(all|any|not|and|between|in|like|or|some|contains|containsall|containskey)\s*.+[\=\>\<=\!\~]+.+)|(let\s+.+[\=]\s*.*)|(begin\s*.*\s*end)|(\s*[\/\*]+\s*.*\s*[\*\/]+)|(\s*(\-\-)\s*.*\s+)|(\s*(contains|containsall|containskey)\s+.*)))(\s*[\;]\s*)*)+)/);
  xssLines = 0
  // XSS Regex to Detect XSS Attacks
  const xssregex = new RegExp(/(\b)(on\S+)(\s*)=|javascript|<(|\/|[^\/>][^>]+|\/[^>][^>]+)>/);
  errorLines = [];

  lines.forEach(line => {
    if (sqlregex.test(line)) {
      errorLines.push([line, 1, 0]);
      sqlLines += 1
    }
    else if (xssregex.test(line)) {
      errorLines.push([line, 0, 1]);
      xssLines += 1
    }
    else {
      errorLines.push([line, 0, 0]);
    }
  })

  const report = {
    code: lines,
    sqlLines,
    xssLines,
    pct: ((sqlLines + xssLines) / errorLines.length * 100).toFixed(2)
  }

  const snap = await get(child(ref(database), '/users/' + currentUser.id));
  const data = snap.val();
  
  if (!data) return
  reports = data.reports || []
  reports.push(report)
  data.reports = reports
  await set(ref(database, '/users/' + currentUser.id), data)

}



app.get('/', (req, res) => {
  res.render("index");
})

app.get('/logout', (req, res) => {
  currentUser = {}
  res.render("index");
})

app.get('/scanner', checkLogout, (req, res) => {
  res.render("scanner");
})

app.get('/reports', checkLogout, async (req, res) => {

  const snap = await get(child(ref(database), '/users/' + currentUser.id));
  const data = snap.val();
  if (!data) return res.render('scanner')

  let reportss = []
  if (data.txt === "user") {
    return res.render("reports", { reports: data.reports || [], messages });
  } else if (data.txt === "manager") {
    const snap2 = await get(child(ref(database), '/users/'));
    const data2 = snap2.val();

    for (let key in data2) {
      const reports = data2[key]["reports"]
      reportss.push(...reports || []);
    }
  }

  return res.render("reports", { reports: reportss, messages });

})

const getMessage = (pct) => {
  if (pct < 25) return messages[0]
  if (pct < 50) return messages[1]
  if (pct < 75) return messages[2]
  if (pct <= 100) return messages[3]
}

app.get('/remediation-control', checkLogout, (req, res) => {
  const pct = (sqlLines + xssLines) / errorLines.length * 100;
  console.log(pct, 'pct');
  res.render("remediation-control", { pct, messages: getMessage(pct) });
})

app.get('/loading', (req, res) => {
  res.render("loading", { type: 'SQL | XSS' });
})

app.get('/get-results', checkLogout, (req, res) => {
  console.log({ errorLines, sqlLines, xssLines });
  res.render("result-analysis", { errorLines, sqlLines, xssLines });
})

app.post('/signup', async (req, res) => {

  const { email, pswd } = req.body;
  await createUserWithEmailAndPassword(auth, email, pswd)
    .then(async (usr) => {
      currentUser = { email, id: usr.user.uid }
      await set(ref(database, '/users/' + usr.user.uid), { ...req.body, reports: [] });
      res.render('index', { signup: true, message: 'Signed in successfully' })
    })
    .catch((error) => {
      const errorMessage = error.message;
      res.render('index', { signup: true, message: errorMessage })
    });

})

app.post('/login', async (req, res) => {

  const { email, pswd } = req.body;

  await signInWithEmailAndPassword(auth, email, pswd)
    .then((usr) => {
      currentUser = { email, id: usr.user.uid }
      res.render('scanner', { login: true, message: 'Signed in successfully' })
    })
    .catch((error) => {
      const errorMessage = error.message;
      res.render('index', { login: true, message: errorMessage })
    });

})

app.post('/test-vulnerability', checkLogout, async (req, res) => {

  res.render("loading");
  getResults(req.body);

})


app.listen(port, () => {
  console.log(`app listening on port ${port}`)
})